// Generated by CoffeeScript 1.9.3

/*
  Renders the body content if, and only if, there is a current authenticated user present. The current user is
  exposed to the context. Reads the local authentication cookie, and only works internally.

  Example:

      <glg-current-user username="{{username}}" user="{{user}}">
        <template is="dom-if" if="{{user}}">
          <span>
            Hello <b>{{user.firstName}}</b> from <span>{{user.city}}</span>!
          </span>
        </template>
      </glg-current-user>

  @demo demo/index.html
 */
Polymer({
  is: 'glg-current-user',

  /*
    Fired when the user is fetched.
  
    @event user-changed
   */
  properties: {

    /*
      Epiquery url used to get user details.  See the [template](https://github.com/glg/epiquery-templates/blob/prod/glgCurrentUser/getUserByLogin.mustache) for the available properties
      exposed on the `User` object.
     */
    url: {
      type: String,
      value: "https://query.glgroup.com/glgCurrentUser/getUserByLogin.mustache"
    },

    /*
      Computed property that gets updated when the `username` changes.
     */
    qs: {
      type: Object,
      computed: '_buildQueryString(username)',
      value: ''
    },

    /*
      Set this to fetch a user explicitly.
     */
    username: {
      type: String,
      value: function() {
        var bits, userParams;
        if (window.debugUserName) {
          window.debugUserName;
        } else {
          '';
        }
        userParams = '';
        userParams = (Cookies.get('glgroot')) != null ? QueryString.parse(Cookies.get('glgroot')) : Cookies.get('starphleet_user');
        if (!userParams) {
          userParams = Cookies.get('glgSAM');
        }
        if (userParams != null ? userParams.hasOwnProperty['username'] : void 0) {
          bits = userParams['username'].split('\\');
          userParams = bits.length === 2 ? bits[1] : bits[0];
        }
        console.log('username', userParams);
        return userParams;
      },
      observer: '_usernameChanged',
      notify: true,
      reflect: true
    },

    /*
      Property to bind to get the current user.
     */
    user: {
      type: Object,
      notify: true
    }
  },
  _domainifyUsername: function(name) {
    if (name.toLowerCase().indexOf('glgroup') === -1) {
      return "glgroup\\" + name;
    } else {
      return name;
    }
  },
  _handleUser: function(evt) {
    return this.user = evt.detail.response[0];
  },
  _buildQueryString: function(name) {
    return {
      login: this._domainifyUsername(name)
    };
  },
  _usernameChanged: function(name) {
    console.log('change', this.username);
    if (window.glgUserCache[name]) {
      this.user = window.glgUserCache[name];
    }
    return this.debounce('fetch', (function(_this) {
      return function() {
        return _this.$.xhr.generateRequest();
      };
    })(this), 200);
  },
  created: function() {
    return window.glgUserCache = window.glgUserCache || {};
  },
  attached: function() {
    return console.log(this.username);
  }
});
